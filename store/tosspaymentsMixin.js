export default {
  head() {
    return {
      script: [{ src: 'https://js.tosspayments.com/v1/payment' }]
    };
  },
  data() {
    return {
      tossPayments: null,
      error: null,
      payType: '',
      urlSuccess: ''
    };
  },
  methods: {
    getApiUrl(userType) {
      return userType === 'member'
        ? '/user/tickets/user/valid'
        : userType === 'non-member'
        ? '/user/tickets/non-user/valid'
        : '/user/tickets/hana-bank/valid';
    },
    async requestPayment(data, totalPrice, failUrl, originInfo, userType) {
      this.initPayments();

      const apiUrl = this.getApiUrl(userType);
      const paymentData = await this.$axios.$post(apiUrl, data).catch((err) => {
        const errorMessage = err.response.data?.MESSAGE || '';

        if (errorMessage === 'BAD_VALID') {
          const state = err.response.data.STATE;

          if (state === 1) {
            this.feedbackMsg =
              userType === 'member'
                ? 'Íµ¨Îß§Í∞ÄÎä•Ìïú Ìã∞Ïºì(4Í∞ú)ÏùÑ Ï¥àÍ≥ºÌïòÏòÄÏñ¥Ïöî.'
                : `Î≥¥Ïú† Ï§ëÏù∏ ÏûÖÏû•ÏùºÏù¥ ÎèôÏùºÌïú ÏûÖÏû•Í∂å : ${err.response.data.BODY}Í∞ú\n` +
                  'ÏûÖÏû•ÏùºÏù¥ ÎèôÏùºÌïú ÏûÖÏû•Í∂åÏùÄ ÏµúÎåÄ 4Îß§ÍπåÏßÄ Íµ¨Îß§ Í∞ÄÎä•Ìï©ÎãàÎã§.\n' +
                  'Í≤∞Ï†úÎ•º Í≥ÑÏÜçÌïòÏãúÎ†§Î©¥ Íµ¨Îß§ ÏàòÎ•º Î≥ÄÍ≤ΩÌïòÍ±∞ÎÇò ÏûÖÏû• ÏùºÏùÑ Îã§Î•∏ ÎÇ†ÏßúÎ°ú ÏÑ†ÌÉùÌï¥ Ï£ºÏÑ∏Ïöî.';

            this.isTickedLimit = true;
            this.modal.isFeedback = true;
          } else if (state === 2) {
            this.feedbackMsg = 'Ï†ÑÏãú ÏãúÏûëÏùºÍ≥º Ï¢ÖÎ£åÏùº ÏÇ¨Ïù¥Ïóê Ï°¥Ïû¨ÌïòÏßÄ ÏïäÎäî ÌöåÏ∞®ÏóêÏöî.';
            this.modal.isFeedback = true;
            alert('ÌöåÏ∞®Í∞Ä Ï†ÑÏãú ÏãúÏûëÏùºÍ≥º Ï¢ÖÎ£åÏùº ÏÇ¨Ïù¥Ïóê Ï°¥Ïû¨ÌïòÏßÄ ÏïäÏùå');
          } else if (state === 3) {
            this.feedbackMsg = 'ÏòàÎß§ Ïò§ÌîàÏùºÏù¥ ÏßÄÎÇòÏßÄ ÏïäÏïòÍ±∞ÎÇò ÌöåÏ∞® ÏãúÏûëÏùºÏù¥ 2Ï£º ÎØ∏ÎßåÏù∏ Ìã∞ÏºìÏù¥ ÏïÑÎãàÏóêÏöî.';
            this.modal.isFeedback = true;
          } else if (state === 4) {
            this.feedbackMsg = 'ÌöåÏ∞® Ï¢ÖÎ£å 1ÏãúÍ∞Ñ Ï†ÑÍπåÏßÄÎßå ÏòàÎß§Í∞Ä Í∞ÄÎä•Ìï¥Ïöî.';
            this.modal.isFeedback = true;
          } else if (state === 5) {
            this.feedbackMsg = 'ÏïÑÏâΩÏßÄÎßå ÏÑ†ÌÉùÌïú ÌöåÏ∞®Í∞Ä Îß§ÏßÑÎêòÏóàÏñ¥Ïöî. Îçú Î∂êÎπÑÎäî ÌöåÏ∞®Îäî Ïñ¥Îñ†ÏÑ∏Ïöî?';
            this.modal.isFeedback = true;
          }
        } else {
          alert('ÏïåÏàòÏóÜÎäî Ïò§Î•ò. Îã§Ïãú ÏãúÎèÑÌï¥Ï£ºÏÑ∏Ïöî.');
        }
      });

      if (!paymentData) {
        return;
      }

      if (paymentData.amount !== totalPrice) {
        alert('Í∞ÄÍ≤©Ïù¥ ÏùºÏπòÌïòÏßÄ ÏïäÏäµÎãàÎã§.');
        return;
      }

      // Ïù¥ mixinÏùò this.tossPaymentsÏù∏ Ï†ê Ïú†Ïùò.
      // ÌÜ†Ïä§ÌéòÏù¥ Î™®ÎìàÏù¥ Ï†ïÌïú Í∞íÎåÄÎ°ú ÏïÑÎûò Í∞íÏùÑ ÎÑ£Ïùå.
      await this.tossPayments
        .requestPayment('Ïπ¥Îìú', {
          amount: paymentData.amount,
          orderId: paymentData.uuid,
          orderName: paymentData.title.substring(0, 100),
          customerName: paymentData.name,
          customerEmail: paymentData.email,
          cardInstallmentPlan: 0,
          successUrl: `${window.location.origin}/ticketing/tosspayments-process?type=${originInfo.type}&id=${originInfo.id}&userType=${userType}`,
          failUrl
        })
        .catch((error) => {
          if (error.code === 'USER_CANCEL') {
            // Í≤∞Ï†ú Í≥†Í∞ùÏù¥ Í≤∞Ï†úÏ∞ΩÏùÑ Îã´ÏïòÏùÑ Îïå ÏóêÎü¨ Ï≤òÎ¶¨
          }
        });
    },
    async membershipPayment(uuid, amount) {
      this.initPayments();
      const invalidPaymentData = !uuid || !amount || !this.tossPayments;
      if (invalidPaymentData) {
        alert('Í≤∞Ï†ú Ïò§Î•ò');
        return;
      }

      const userInfo = this.$store.getters['service/auth/getUserInfo'];

      // console.log('this.deviceInfo', this.$store.state.deviceInfo);
      // console.log('this.payType', this.payType);
      this.urlSuccess = `${window.location.origin}/payment/confirm-payment-membership?payment-type=${this.payType}`;
      await this.tossPayments
        .requestPayment('Ïπ¥Îìú', {
          amount,
          orderId: uuid,
          orderName: 'Payment for register membership',
          customerName: userInfo.name || '',
          customerEmail: userInfo.email || '',
          cardInstallmentPlan: 0,
          successUrl: `${window.location.origin}/payment/confirm-payment-membership?payment-type=${this.payType}`,
          failUrl: `${window.location.origin}/membership/registration`
        })
        .catch((err) => {
          const errorString = String(err);
          // console.log('üöÄ ~ membershipPayment ~ errorString:', errorString);
          switch (errorString) {
            case 'Error: Í≤∞Ï†úÍ∞Ä Ï∑®ÏÜåÎêòÏóàÏäµÎãàÎã§.':
              break;

            default:
              this.$router.push('/payment/error');
              break;
          }
        });
    },
    initPayments() {
      let payType = 'TOSSPAYMENTS';
      if (!this.tossPayments) {
        let clientKey = process.env.TOSSPAYMENTS_CLIENT_KEY;
        if (this.$store.state.deviceInfo.isApp) {
          if (this.$store.state.deviceInfo.isIOS) {
            payType = 'TOSSPAYMENTS_IOS';
            clientKey = process.env.TOSSPAYMENTS_IOS_CLIENT_KEY;
          } else if (this.$store.state.deviceInfo.isAndroid) {
            payType = 'TOSSPAYMENTS_ANDROID';
            clientKey = process.env.TOSSPAYMENTS_ANDROID_CLIENT_KEY;
          }
        }
        this.payType = payType;
        this.tossPayments = window.TossPayments(clientKey);
      }
    }
  }
};
